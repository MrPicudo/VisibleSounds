/* Grid.swift --> VisibleSounds. Created by Miguel Torres on 18/04/23. */

import SwiftUI

struct Grid: View {
    
    // State variable that stores the name of the frame for the animation.
    @State var name: String = "A1"
    @State var times: Double = 0.0
    
    @EnvironmentObject var audioPlayer: AudioPlayer
    
    // Object that defines an array of "GridItem()" elements, meaning, we create a grid that will have 9 columns.
    let columnLayout = Array(repeating: GridItem(), count: 9)
    
    // State variable that defines the selected color to display it in the "Selected Color" text of the app.
    @State var selectedAnimation = FrameSound(name: "A30")
    
    // State variable to control active buttons.
    @State var showing: Bool = false
    
    // VState variable to control sound frequency.
    @State var hzValue: String = "345Hz"
    
    // Array of FrameSound objects to create buttons that activate animations.
    let allAnimations: [FrameSound] = [
        FrameSound(name: "A30"),
        FrameSound(name: "B30"),
        FrameSound(name: "C30"),
        FrameSound(name: "D30"),
        FrameSound(name: "E30"),
        FrameSound(name: "F30"),
        FrameSound(name: "G30"),
        FrameSound(name: "H30"),
        FrameSound(name: "I30"),
        FrameSound(name: "J30"),
        FrameSound(name: "K30"),
        FrameSound(name: "L30"),
        FrameSound(name: "M30"),
        FrameSound(name: "N30"),
        FrameSound(name: "O30"),
        FrameSound(name: "P30"),
        FrameSound(name: "Q30")
    ]
        
    var body: some View {
        
        ZStack {
            Image("Back01")
                .resizable()
                .ignoresSafeArea(.all)
            
            VStack {
                // App instructions
                Text("Select an image from the list to see how it forms with a sound of the indicated frequency below")
                    .font(.largeTitle)
                    .fontWeight(.heavy)
                    .multilineTextAlignment(.center)
                    .foregroundColor(Color.white)
                    .padding(50)
                // We use a ScrollView so that if there are more colors than can fit, we can scroll.
                ScrollView {
                    // We start the grid that is created with the array of GridItem objects we defined above. The "LayVGrid" object type creates each grid only when needed, and not before. The LazyVGrid argument defines how many columns will be displayed in the grid.
                    LazyVGrid(columns: columnLayout) {
                        // For each color in the "allColors" list, we will create a button.
                        ForEach(allAnimations) { animation in
                            Button {
                                // The action generated by the button is to change the selected image.
                                selectedAnimation = animation
                                // Cycle for the selected animation.
                                for i in 1...30 {
                                    Timer.scheduledTimer(withTimeInterval: 0.09 * times, repeats: false) { timer in
                                        name = String(selectedAnimation.name.first!) + String(i)
                                        if i == 1 { // Due to the delay of the for loop, we must update the name within the first cycle, or it updates with the previous value.
                                            // This is because all the code within the button closure is performed in microseconds, so it hasn't reached the first cycle when it has already "updated" the value if we leave it outside the for loop, and not specifically within the first cycle.
                                            hzValue = hertzvalue(name: name)
                                            audioPlayer.playS(resourceName: hzValue, resourceExtension: "mp3")
                                        }
                                        showing = !name.contains("30")
                                        if !showing {
                                            audioPlayer.stopSound()
                                        }
                                    }
                                    times += 1 // We modify the counter so that each cycle is displayed at a different time.
                                }
                                times = 0.0
                            } label: {
                                // In a ZStack, the first element goes below the ones that follow.
                                ZStack {
                                    Image(animation.name)
                                        .resizable()
                                        .aspectRatio(1.0, contentMode: .fit)
                                        .cornerRadius(20)
                                    Image("Background")
                                        .resizable()
                                        .aspectRatio(1.0, contentMode: .fill)
                                }
                            }
                            .buttonStyle(.automatic)
                            .disabled(showing) // We disable the button each time an animation is being displayed.
                            .foregroundColor(Color.black)
                        }
                    }
                    .padding(20)
                }
                ZStack {
                    Image(name)
                        .resizable()
                        .aspectRatio(contentMode: .fit)
                    Image("Background")
                        .resizable()
                        .aspectRatio(contentMode: .fit)
                }

                Text(hertzvalue(name: name))
                    .font(.title2)
                    .fontWeight(.bold)
                    .foregroundColor(Color.white)
                    .padding(.bottom, 50)
            }
        }
        
    }
}

struct Grid_Previews: PreviewProvider {
    static let audioPlayer = AudioPlayer()
    static var previews: some View {
        Grid()
            .environmentObject(audioPlayer)
    }
}
